# docker-compose.yaml - Sistema MCP Agentic RAG

services:
  # ======================
  # SERVICIOS MCP AGENTIC RAG
  # ======================
  
  # Servidor RAG MCP Principal
  rag-mcp-server:
    build:
      context: ./mcp-agentic-rag
      dockerfile: ./docker/Dockerfile.rag-server
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=local
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      - OPENAI_MODEL=${OPENAI_MODEL}
      - VECTOR_DB_TYPE=chroma
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - RAG_MCP_PORT=8000
    volumes:
      - ./mcp-agentic-rag/data:/app/data
      - ./mcp-agentic-rag/knowledge_base:/app/knowledge_base
      - chromadb_data:/app/.chromadb
    depends_on:
      - chromadb
    networks:
      - agent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Base de datos vectorial ChromaDB
  chromadb:
    image: chromadb/chroma:latest
    ports:
      - "8004:8000"  # Puerto externo diferente para evitar conflictos
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ALLOW_RESET=true
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - agent-network

  # Servidor de memoria MCP
  memory-mcp-server:
    build:
      context: ./mcp-agentic-rag
      dockerfile: ./docker/Dockerfile.memory-server
    ports:
      - "8002:8000"
    environment:
      - ENVIRONMENT=local
      - REDIS_URL=redis://redis:6379
      - MEMORY_MCP_PORT=8002
    depends_on:
      - redis
    networks:
      - agent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para memoria persistente
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agent-network
    command: redis-server --appendonly yes

  # ======================
  # SERVICIO PRINCIPAL ÚNICO
  # ======================

  # Sumiller Bot Agéntico (ÚNICO BOT - No hay maitre-bot)
  sumiller-bot:
    build: 
      context: .
      dockerfile: ./sumiller-bot/Dockerfile
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=local
      - PORT=8001
      
      # OpenAI API Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      - OPENAI_MODEL=${OPENAI_MODEL}
      
      # URLs de servicios MCP
      - RAG_MCP_URL=http://rag-mcp-server:8000
      - MEMORY_MCP_URL=http://memory-mcp-server:8000
      
      # Variables para el cliente resiliente
      - HTTP_POOL_MAX_CONNECTIONS=100
      - HTTP_POOL_KEEPALIVE_CONNECTIONS=20
      - CIRCUIT_BREAKER_FAILURE_THRESHOLD=3
      - CIRCUIT_BREAKER_TIMEOUT=30.0
      
    volumes:
      # Montar configuración global (redundante pero útil para desarrollo)
      - ./config.py:/app/config.py:ro
      - ./sumiller-bot/test_improvements.py:/app/test_improvements.py:ro
      
    networks:
      - agent-network
    depends_on:
      - rag-mcp-server
      - memory-mcp-server
    restart: unless-stopped
    
    # Health check configuration
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Límites de recursos opcionales
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # ======================
  # SERVICIOS DE DESARROLLO
  # ======================

  # Tester interactivo MCP
  mcp-tester:
    build:
      context: ./mcp-agentic-rag
      dockerfile: ./docker/Dockerfile.tester
    ports:
      - "8003:8000"
    environment:
      - RAG_SERVER_URL=http://rag-mcp-server:8000
      - MEMORY_SERVER_URL=http://memory-mcp-server:8000
      - SUMILLER_URL=http://sumiller-bot:8001
    depends_on:
      - rag-mcp-server
      - memory-mcp-server
      - sumiller-bot
    volumes:
      - ./mcp-agentic-rag/test_data:/app/test_data
    networks:
      - agent-network

networks:
  agent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  chromadb_data:
    driver: local
  redis_data:
    driver: local