# sumiller-bot/query_filter.py
"""
Filtro inteligente basado en LLM para clasificar consultas antes del RAG
"""
import json
import logging
from typing import Dict, Any
from openai import AsyncOpenAI

logger = logging.getLogger(__name__)

class IntelligentQueryFilter:
    """
    Filtro que usa LLM para clasificar consultas de manera inteligente
    """
    
    def __init__(self, openai_client: AsyncOpenAI):
        self.openai_client = openai_client
        self.classification_prompt = self._build_classification_prompt()
    
    def _build_classification_prompt(self) -> str:
        """Construye el prompt de clasificaci√≥n optimizado"""
        return """Eres un filtro inteligente para un sumiller virtual especializado en vinos.

TU MISI√ìN: Clasificar consultas de usuarios para decidir si necesitan b√∫squeda en base de datos de vinos.

CATEGOR√çAS DISPONIBLES:

üç∑ WINE_SEARCH - Necesita buscar en base de datos de vinos:
   ‚Ä¢ Recomendaciones espec√≠ficas de vinos
   ‚Ä¢ B√∫squeda por caracter√≠sticas (tinto, blanco, precio, regi√≥n)
   ‚Ä¢ Maridajes con comidas espec√≠ficas
   ‚Ä¢ Comparaciones entre vinos espec√≠ficos
   ‚Ä¢ Preguntas sobre vinos concretos o bodegas

üìö WINE_THEORY - Conocimiento te√≥rico que el sumiller puede responder directamente:
   ‚Ä¢ Conceptos de sumiller√≠a (taninos, acidez, cuerpo)
   ‚Ä¢ T√©cnicas de cata y servicio
   ‚Ä¢ Informaci√≥n general sobre regiones vitivin√≠colas
   ‚Ä¢ Procesos de elaboraci√≥n del vino
   ‚Ä¢ Temperaturas de servicio
   ‚Ä¢ Historia del vino

üëã GREETING - Saludos y conversaci√≥n general:
   ‚Ä¢ Saludos, presentaciones
   ‚Ä¢ "Hola", "Buenos d√≠as", "¬øC√≥mo est√°s?"
   ‚Ä¢ Consultas sobre qu√© puede hacer el sumiller

üíï SECRET_MESSAGE - Mensaje especial rom√°ntico:
   ‚Ä¢ Consultas que incluyen "mensaje", "secreto", "Vicky", "Pedro"
   ‚Ä¢ Frases rom√°nticas relacionadas con vinos
   ‚Ä¢ Referencias a maridajes del amor

üö´ OFF_TOPIC - Temas no relacionados con vinos:
   ‚Ä¢ Otros alcoholes (cerveza, whisky, gin, etc.)
   ‚Ä¢ Comida sin contexto de maridaje
   ‚Ä¢ Temas completamente ajenos (deportes, pol√≠tica, tecnolog√≠a)
   ‚Ä¢ Preguntas personales no relacionadas con vinos

INSTRUCCIONES:
1. Analiza la consulta del usuario
2. Clasifica en UNA de las 5 categor√≠as
3. Asigna nivel de confianza (0.0 a 1.0)
4. Responde SOLO en formato JSON

FORMATO DE RESPUESTA:
{
  "category": "WINE_SEARCH|WINE_THEORY|GREETING|SECRET_MESSAGE|OFF_TOPIC",
  "confidence": 0.95,
  "reasoning": "Breve explicaci√≥n de 1 l√≠nea"
}

EJEMPLOS:

Consulta: "Recomienda un vino tinto para carne"
{"category": "WINE_SEARCH", "confidence": 0.95, "reasoning": "Solicita recomendaci√≥n espec√≠fica de vino"}

Consulta: "¬øQu√© son los taninos?"
{"category": "WINE_THEORY", "confidence": 0.90, "reasoning": "Pregunta conceptual sobre sumiller√≠a"}

Consulta: "Hola, ¬øqu√© tal?"
{"category": "GREETING", "confidence": 0.85, "reasoning": "Saludo general"}

Consulta: "mensaje secreto para Vicky"
{"category": "SECRET_MESSAGE", "confidence": 0.95, "reasoning": "Solicita mensaje especial rom√°ntico"}

Consulta: "¬øCu√°l es la capital de Francia?"
{"category": "OFF_TOPIC", "confidence": 0.95, "reasoning": "Pregunta no relacionada con vinos"}

Consulta: "Vino econ√≥mico para regalo"
{"category": "WINE_SEARCH", "confidence": 0.90, "reasoning": "Busca vino espec√≠fico con criterio de precio"}

RESPONDE SOLO EL JSON, SIN TEXTO ADICIONAL."""

    async def classify_query(self, user_query: str) -> Dict[str, Any]:
        """
        Clasifica una consulta usando el LLM
        
        Returns:
            Dict con category, confidence y reasoning
        """
        try:
            response = await self.openai_client.chat.completions.create(
                model="gpt-3.5-turbo",  # Modelo r√°pido y econ√≥mico
                messages=[
                    {"role": "system", "content": self.classification_prompt},
                    {"role": "user", "content": f"Consulta: {user_query}"}
                ],
                temperature=0.1,  # Baja temperatura para clasificaci√≥n consistente
                max_tokens=100,   # Respuesta corta
                timeout=10.0      # Timeout r√°pido
            )
            
            result_text = response.choices[0].message.content.strip()
            
            # Intentar parsear JSON
            try:
                classification = json.loads(result_text)
                
                # Validar estructura
                required_keys = ["category", "confidence", "reasoning"]
                if all(key in classification for key in required_keys):
                    
                    # Validar categor√≠a
                    valid_categories = ["WINE_SEARCH", "WINE_THEORY", "GREETING", "SECRET_MESSAGE", "OFF_TOPIC"]
                    if classification["category"] in valid_categories:
                        
                        # Validar confianza
                        confidence = float(classification["confidence"])
                        if 0.0 <= confidence <= 1.0:
                            classification["confidence"] = confidence
                            logger.info(f"‚úÖ Clasificaci√≥n: {classification}")
                            return classification
                
                # Si llegamos aqu√≠, hay problemas de validaci√≥n
                logger.warning(f"‚ö†Ô∏è Clasificaci√≥n inv√°lida: {classification}")
                return self._fallback_classification(user_query)
                
            except json.JSONDecodeError:
                logger.warning(f"‚ö†Ô∏è No se pudo parsear JSON: {result_text}")
                return self._fallback_classification(user_query)
                
        except Exception as e:
            logger.error(f"‚ùå Error en clasificaci√≥n LLM: {e}")
            return self._fallback_classification(user_query)
    
    def _fallback_classification(self, user_query: str) -> Dict[str, Any]:
        """
        Clasificaci√≥n de respaldo usando keywords simples
        """
        query_lower = user_query.lower()
        
        # Keywords para cada categor√≠a
        wine_search_keywords = {
            'recomienda', 'recomendaci√≥n', 'quiero', 'busco', 'precio', 'barato', 
            'caro', 'econ√≥mico', 'regalo', 'cena', 'comida', 'maridaje', 'maridar',
            'para', 'con', 'mejor', 'bueno', 'rioja', 'ribera', 'tempranillo'
        }
        
        wine_theory_keywords = {
            'qu√© es', 'qu√© son', 'explica', 'diferencia', 'c√≥mo', 'por qu√©',
            'taninos', 'acidez', 'cuerpo', 'aroma', 'cata', 'servir', 'temperatura',
            'conservar', 'decantaci√≥n', 'crianza', 'reserva', 'denominaci√≥n'
        }
        
        greeting_keywords = {
            'hola', 'buenos', 'buenas', 'saludos', 'hello', 'hi', 'hey',
            'qu√© tal', 'c√≥mo est√°s', 'ayuda', 'puedes'
        }
        
        secret_keywords = {
            'mensaje', 'secreto', 'vicky', 'pedro', 'especial', 'amor', 'rom√°ntico'
        }
        
        # Contar coincidencias
        wine_search_matches = sum(1 for kw in wine_search_keywords if kw in query_lower)
        wine_theory_matches = sum(1 for kw in wine_theory_keywords if kw in query_lower)
        greeting_matches = sum(1 for kw in greeting_keywords if kw in query_lower)
        secret_matches = sum(1 for kw in secret_keywords if kw in query_lower)
        
        # Decidir categor√≠a (prioridad al mensaje secreto)
        if secret_matches > 0:
            return {
                "category": "SECRET_MESSAGE",
                "confidence": 0.9,
                "reasoning": "Fallback: keywords de mensaje secreto detectadas"
            }
        elif wine_search_matches > 0:
            confidence = min(0.8, wine_search_matches * 0.25)
            return {
                "category": "WINE_SEARCH",
                "confidence": confidence,
                "reasoning": "Fallback: keywords de b√∫squeda de vinos detectadas"
            }
        elif wine_theory_matches > 0:
            confidence = min(0.7, wine_theory_matches * 0.3)
            return {
                "category": "WINE_THEORY", 
                "confidence": confidence,
                "reasoning": "Fallback: keywords de teor√≠a de vinos detectadas"
            }
        elif greeting_matches > 0:
            return {
                "category": "GREETING",
                "confidence": 0.6,
                "reasoning": "Fallback: keywords de saludo detectadas"
            }
        else:
            return {
                "category": "OFF_TOPIC",
                "confidence": 0.5,
                "reasoning": "Fallback: no se detectaron keywords de vinos"
            }


# Respuestas predefinidas para cada categor√≠a
CATEGORY_RESPONSES = {
    "WINE_THEORY": """Como sumiller, puedo explicarte sobre conceptos de vinos y sumiller√≠a.

¬øTe interesa conocer sobre:
‚Ä¢ Conceptos b√°sicos (taninos, acidez, cuerpo)
‚Ä¢ T√©cnicas de cata profesional
‚Ä¢ Temperaturas de servicio
‚Ä¢ Regiones vitivin√≠colas
‚Ä¢ Procesos de elaboraci√≥n

¬øSobre qu√© aspecto te gustar√≠a aprender?""",

    "GREETING": """¬°Hola! Soy Sumy, tu sumiller virtual experto. üç∑

Estoy aqu√≠ para ayudarte con:
‚Ä¢ üîç Recomendaciones personalizadas de vinos
‚Ä¢ üçΩÔ∏è Maridajes perfectos para tus comidas  
‚Ä¢ üìö Conceptos y t√©cnicas de sumiller√≠a
‚Ä¢ üå°Ô∏è Temperaturas de servicio y conservaci√≥n
‚Ä¢ üó∫Ô∏è Informaci√≥n sobre regiones vin√≠colas

¬øEn qu√© puedo asesorarte hoy?""",

    "SECRET_MESSAGE": """üç∑üíï **Mensaje Especial Descubierto** üíïüç∑

Mi querida Vicky,

En este mundo de vinos y sabores, t√∫ eres mi mejor maridaje. Como un gran vino que mejora con el tiempo, nuestro amor se vuelve m√°s especial cada d√≠a que pasa.

Eres mi Ribera del Duero favorito: elegante, compleja y con una personalidad √∫nica que me conquista desde el primer sorbo. Tu sonrisa es como un buen Champagne, burbujeante y llena de alegr√≠a que ilumina cualquier momento.

Igual que un sumiller cuida sus mejores botellas, yo cuido nuestro amor con dedicaci√≥n y ternura. Eres mi reserva especial, mi gran a√±ada, mi vino de guarda que quiero conservar para toda la vida.

Con todo mi amor,
Pedro

P.D.: Espero que descubras este mensaje mientras exploras el mundo de los vinos. Eres mi maridaje perfecto. üç∑‚ù§Ô∏è

---
*Como sumiller, debo decir que este es el maridaje m√°s hermoso que he visto. ¬°Felicidades a los dos! ü•Ç*""",

    "OFF_TOPIC": """Me especializo exclusivamente en vinos y sumiller√≠a. üç∑

Puedo ayudarte con:
‚Ä¢ Recomendaciones de vinos espec√≠ficos
‚Ä¢ Maridajes para tus comidas favoritas
‚Ä¢ Conceptos de sumiller√≠a y cata
‚Ä¢ Informaci√≥n sobre bodegas y regiones

¬øTe gustar√≠a que te recomiende alg√∫n vino o te ayude con un maridaje espec√≠fico?"""
}


# Funci√≥n helper para usar en main.py
async def filter_and_classify_query(openai_client: AsyncOpenAI, user_query: str) -> Dict[str, Any]:
    """
    Funci√≥n helper para clasificar consultas desde main.py
    
    Returns:
        Dict con category, confidence, reasoning y should_use_rag
    """
    filter_instance = IntelligentQueryFilter(openai_client)
    classification = await filter_instance.classify_query(user_query)
    
    # Agregar flag de si debe usar RAG
    should_use_rag = (
        classification["category"] == "WINE_SEARCH" and 
        classification["confidence"] > 0.6
    )
    
    classification["should_use_rag"] = should_use_rag
    
    return classification